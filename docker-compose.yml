version: "3"
services:
  db:
    image: mongo:7.0
    container_name: db
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: g8-mongo
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - my_network

  zookeeper:
    restart: always
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    restart: always
    image: wurstmeister/kafka:2.11-1.1.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "requests:1:1,responses:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

  react-app:
    image: node:latest
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: yarn start
    ports:
      - "3000:3000"
    networks:
      - my_network

  node-consumer:
    image: node:latest
    working_dir: /app
    volumes:
      - ./consumer:/app
    command: "yarn dev"
    depends_on:
      - kafka
      - db
    networks:
      - my_network

  node-producer:
    image: node:latest
    working_dir: /app
    volumes:
      - ./producer:/app
    command: "yarn dev"
    depends_on:
      - kafka
    ports:
      - "3333:3333"
    networks:
      - my_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3002:3000"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
