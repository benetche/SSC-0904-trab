version: "3"
services:
  db:
    image: mongo:7.0
    container_name: db
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: g8-mongo
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin

  zookeeper:
    restart: always
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    restart: always
    image: wurstmeister/kafka:2.11-1.1.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "requests:1:1,responses:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # kafka-init:
  #   image: wurstmeister/kafka:2.11-1.1.0
  #   depends_on:
  #     - kafka
  #   entrypoint: >
  #     /bin/bash -c "
  #       # Aguardar Kafka iniciar
  #       while ! nc -z kafka 9092; do
  #         sleep 1;
  #       done;
  #       # Deletar e recriar tÃ³picos
  #       /opt/kafka/bin/kafka-topics.sh --delete --topic requests --zookeeper zookeeper:2181;
  #       /opt/kafka/bin/kafka-topics.sh --delete --topic responses --zookeeper zookeeper:2181;
  #       /opt/kafka/bin/kafka-topics.sh --create --topic requests --partitions 1 --replication-factor 1 --zookeeper zookeeper:2181;
  #       /opt/kafka/bin/kafka-topics.sh --create --topic responses --partitions 1 --replication-factor 1 --zookeeper zookeeper:2181;
  #     "
  react-app:
    image: node:latest
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: >
      "yarn start"
    ports:
      - "3000:3000"

  node-consumer:
    image: node:latest
    working_dir: /app
    volumes:
      - ./consumer:/app
    command: "yarn dev"
    depends_on:
      - kafka
      - db

  node-producer:
    image: node:latest
    working_dir: /app
    volumes:
      - ./producer:/app
    command: "yarn dev"
    depends_on:
      - kafka
    ports:
      - "3333:3333"
